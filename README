# JS Sandbox Backend for CloudRun/Docker

JavaScript Sandbox designed to run in Cloud Run or Docker environments.

## Description

Built using (QuickJS-emscripten)[https://github.com/justjake/quickjs-emscripten], Deno, Deno Workers and Docker Containers.

An ingress sidecar container is used to proxy incoming requests for network isolation of the sandbox microservice. The ingress container also serves a sample frontend for demonstration and testing purposes. This sidecar is built with Bun, which claims its effectiveness in serving requests.

The project leverages Cloud Run's gVisor and Docker containers to provide the necessary isolation of the services.
QuickJS as an efficient JavaScript interpreter, ensures that the executed code is entirely sandboxed from the host service. quickjs-emscripten provides QuickJS in WASM environment and the ability to execute the sandbox from JS host. Also, provides an easy API to expose additional functionality. TBD more docs.

Deno provides granular security restrictions in order to ensure further developments are not exposing APIs which provides more access than needed.
Deno Workers are used for concurrency and for effectively applying execution timeouts.

This setup *should* provide a secure, isolated, and efficient environment for running JavaScript code.

**I developed this project for hobby/evaluation purposed, it comes with NO WARRANTIES. It needs future Security evaluations.**

## Deploy

Please, setup your service names and regions inside `cloudbuild.yaml` and `cloudrun.yaml`.

```
gclouds builds submit
```

## Development

@ToDo: Documentation will be updated soon.

## ToDo List
1. Use envsubst for filling `cloudrun.yaml` with the variables available from `cloudbuild.yaml`
2. Update `cloudbuild.yaml` to exclude the extra deploy step, which is currently needed in order `service replace` to work.
3. Write tests to the ingress service
4. Add descriptions on how to use and further develop based on this repo
5. Add the availability to provide code from URL, S3, GCS. Load the file from the ingress service and provide it as shared volume in the memory for the sandbox service.
6. Add rate limits in the ingress service
7. Test under pressure